model@allparameters
model@parameters
model@algorithm
model@model_id
model@model$model_summary
model@model$scoring_history
model@parameters$y
model@parameters$x
g = gc()
rm(list=ls())
install.packages(c("acepack", "drat", "openssl", "qgraph", "survival"))
install.packages('fractal')
library(fractal)
data(beamchaos)
plot(beamchaos)
install.packages("survival")
options(warn = -1)
options(scipen = 999)
suppressMessages(library(rgdal))
suppressMessages(library(raster))
suppressMessages(library(caret))
suppressMessages(library(rgdal))
suppressMessages(library(raster))
suppressMessages(library(caret))
list.files2(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00/LE70070572000028EDC00_ref/', full.names = T, recursive = F)
img <- raster::brick('D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00/LE70070572000028EDC00_ref')
list.files(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00/LE70070572000028EDC00_ref')
list.files(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00/', full.names = T)
imgList <- list.files(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00/', full.names = T)
imgList
paste("/B", c(1:5, 7), '_dn_ref.tif', sep = '')
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
grep2(pattern = paste("/B", c(1:5, 7), '_dn_ref.tif', sep = ''), x = imgList)
imgList <- imgList[grep2(pattern = paste("/B", c(1:5, 7), '_dn_ref.tif', sep = ''), x = imgList)]
imgList
img <- lapply(imgList, function(x){
z <- raster::raster(x)
return(z)
})
img <- brick(img)
g = gc()
rm(list=ls())
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(rgdal))
suppressMessages(library(raster))
suppressMessages(library(caret))
imgList <- list.files(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000028EDC00', full.names = T)
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
imgList <- imgList[grep2(pattern = paste("/B", c(1:5, 7), '_dn_ref.tif', sep = ''), x = imgList)]
img <- brick(imgList)
img <- raster::brick(imgList)
img <- raster::stack(imgList)
img
c(paste0("B", 1:5, coll = ""), "B7")
names(img) <- c(paste0("B", 1:5, coll = ""), "B7")
rm(imgList)
img
plotRGB(img * (img >= 0), r = 4, g = 5, b = 3, scale = 10000)
plot(img[[1]])
plot(img[[3]])
plot(img[[2]])
plot(img)
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(rgdal))
suppressMessages(library(raster))
suppressMessages(library(caret))
imgList <- list.files(path = 'D:/Harold/_maps/landsat/images/2000/LE70070572000044EDC00', full.names = T)
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
imgList <- imgList[grep2(pattern = paste("/B", c(1:5, 7), '_dn_ref.tif', sep = ''), x = imgList)]
img <- raster::stack(imgList); rm(imgList)
names(img) <- c(paste0("B", 1:5, coll = ""), "B7")
plot(img)
plot(img[[3]])
plot(img)
g = gc()
rm(list=ls())
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
install.packages(c("aqp", "installr", "randomForestSRC"))
install.packages('covr')
suppressMessages(library(lazyeval))
suppressMessages(library(lazyeval))
(library(lazyeval))
library(lazyeval)
library(lazyeval)
library(lubridate)
library(memoise)
library(roxygen2)
install.packages('roxygen2')
library(stringr)
library(testthat)
library(tibble)
sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(16, 2)
sqrt_newton(16, 2)
sqrt_newton_recur <- function(a, init, eps = 0.01){
if(abs(init**2 - a) < eps){
result <- init
} else {
init <- 1/2 * (init + a/init)
result <- sqrt_newton_recur(a, init, eps)
}
return(result)
}
sqrt_newton_recur(16, 2)
sqrt_newton_recur <- function(a, init, eps = 0.01){
if(abs(init**2 - a) < eps){
result <- init
} else {
init <- 1/2 * (init + a/init)
result <- sqrt_newton_recur(a, init, eps)
}
return(result)
}
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
Map(sqrt_newton, numbers, init = 1)
sqrt_newton(a = 16, init = 2)
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
Map(sqrt_newton, numbers, init = 1)
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
profvis::profvis({# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
lapply(numbers, sqrt_newton, init = 1)
sapply(numbers, sqrt_newton, init = 1)
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)
Reduce(`+`, numbers, init = 0)
sum(numbers)
Reduce(my_min, numbers)
my_min <- function(a, b){
if(a < b){
return(a)
} else {
return(b)
}
}
Reduce(my_min, numbers)
min(numbers)
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 4
lapply(numbers, sqrt_newton, init = 1)
# Option 5
sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 4
lapply(numbers, sqrt_newton, init = 1)
# Option 5
sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
res <- sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
res <- Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
res <- sqrt_newton_vec(numbers, 1)
# Option 4
res <- lapply(numbers, sqrt_newton, init = 1)
# Option 5
res <- sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
res <- sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
res <- mapply(sqrt_newton, numbers, init = inits)})
sqrt_newton(4, 1)
options(warn = -1)
options(scipen = 999)
suppressMessages(library(testthat))
test_that("Test sqrt_newton: positive numeric",{
expected <- 2 # Define the result we expect
actual <- sqrt_newton(4, 1) # Code to test
expect_equal(expected, actual) # Compare
})
test_that("Test sqrt_newton: positive numeric",{
eps <- 0.001
expected <- 2
actual <- sqrt_newton(4, 1, eps = eps)
expect_lt(abs(expected - actual), eps)
})
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton(49, 1E100000, 1E-100000)
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > 100) stop("Maximum number of iterations reached")
}
return(init)
}
sqrt_newton(49, 1E100, 1E-100)
sqrt_newton <- function(a, init, eps = 0.01, iter = 100){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > iter) stop("Maximum number of iterations reached")
}
return(init)
}
test_that("Test sqrt_newton: not enough iterations",{
expect_error(sqrt_newton(4, 1E100, 1E-100, iter = 100))
})
test_file('GitHub/r_scripts/testingFunctions.R')
test_file('GitHub/r_scripts/testingFunctions.R')
source('~/GitHub/cwr_changing_global_diet/r_script/chDiets_data.R', echo=TRUE)
shiny::runApp('C:/Users/haachicanoy/Desktop')
library(raster)
?crop
library(dplyr)
test2<-test2%>%group_by(CELL30M, SoilProfile) %>% mutate_each(acum=cumsum(.))
test2%>%group_by(CELL30M, SoilProfile) %>% mutate_each(funs(acum=cumsum(.))
)
test2<-test2%>%group_by(CELL30M, SoilProfile) %>% mutate_each(funs(acum=cumsum(SharePct_sum )))
test3 <- test2[,c("CELL30M","SharePct_sum")] %>% group_by(CELL30M) %>% summarise_each(funs(sum(.)))%>%data.frame()
?mutate
install.packages(c("colorspace", "ggplot2", "plotly", "plotmo", "rgdal", "sjmisc", "sjPlot", "SparseM", "XML", "yaml"))
source('~/.active-rstudio-document', echo=TRUE)
library(raster)
library(ncdf4)
library(dplyr)
shiny::runApp('C:/Users/haachicanoy/Desktop')
library(dplyr)
library(dplyr)
?left_join
runApp('C:/Users/haachicanoy/Desktop')
load('//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/02-Soil-data/.RData')
View(celdas_id_Wise)
View(Cod_Ref_and_Position)
View(Cod_Ref_and_Position_Generic)
View(Soil_profile)
View(Wise_Position)
Cod_Ref
Cod_Ref_Generic
codigo
Codigo_identificadorSoil
CodigoSueloWise
CodigoSueloGeneric
condicion
contador
plot(Data_Soil_Latin_America)
plot(identificador_soil)
require(zoo)
X <- rnorm(100)
Y <- density(X) # see ?density for parameters
plot(Y$x,Y$y, type="l")
Avg.pos <- 1
xt <- diff(Y$x[Y$x<Avg.pos])
yt <- rollmean(Y$y[Y$x<Avg.pos],2)
# This gives you the area
sum(xt*yt)
devtools::install_github("metrumresearchgroup/ggedit",subdir="ggedit")
install.packages(c("BH", "colorspace", "DEoptimR", "git2r", "hyperSpec", "Rcpp", "slam", "statmod"))
if (!require("pacman")) install.packages("pacman")
library(pacman)
pacman::p_load_current_gh("mattflor/chorddiag")
pacman::p_load(dplyr, magrittr, ggplot2, tidyr, curl)
curl::curl_download(
"https://github.com/yoni/r_we_the_people/blob/master/data/petitions.RData?raw=true"
, destfile="./Desktop/petitions.RData" )
load("./Desktop/petitions.RData")
curl::curl_download(
"https://github.com/yoni/r_we_the_people/blob/master/data/petitions.RData?raw=true"
, destfile="C:/Users/haachicanoy/Desktop/petitions.RData" )
load("C:/Users/haachicanoy/Desktop/petitions.RData")
p <- petitions   # save some typing
ids_names <- rbind(
p[, c("issues1.id", "issues1.name")] %>% setNames(c("ids", "names"))
, p[, c("issues2.id", "issues2.name")] %>% setNames(c("ids", "names"))
, p[, c("issues3.id", "issues3.name")]%>% setNames(c("ids", "names"))
) %>%
unique() %>% na.omit()
tag_count <- p %>%
select(id, issues1.id, issues2.id, issues3.id) %>%
tidyr::gather(order, cats, -id) %>%
filter(!is.na(cats)) %>%
mutate(order = tidyr::extract_numeric(order)) %>%
left_join(ids_names, by=c("cats"="ids"))
xtab_tag <- tag_count %>%
count(names) %>%
arrange(desc(n))
xtab_tag %>%
ggplot2::ggplot(aes(x=factor(names,levels=names),y=n)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
plot.margin = unit(c(10,10,20,20), "mm"),
plot.title = element_text(size = 20))  +
ggtitle("Distribution of All Tags") +
labs(x = "petition categories",
y = "category counts")
tags <- sort(unique(ids_names$names))
# matrix to hold counts
mat <- matrix(0,nrow=nrow(tag_count),ncol=length(tags))
colnames(mat) <- tags
# matrix to hold counts
mat <- matrix(0,nrow=nrow(tag_count),ncol=length(tags))
colnames(mat) <- tags
# get columns with tags from dataframe
p_id_nam <- p %>%
select(contains(".name")) %>%
mutate(issues1.name= ifelse(is.na(issues1.name), issues.name, issues1.name)) %>%
mutate_each(funs(ifelse(is.na(.), "", .)), starts_with("issues"))
# make matrix
for (i in seq_along(tags)) {
for (j in c(1,2,3)){ # 1,2,3 are columns I want
mat[,i] <- as.numeric(tags[i]==p_id_nam[[j]]) +  mat[,i]
is.na(mat[,i]) <- 0
}
}
adjmat <- t(mat) %*% mat
# set number of colors needed
colorCount <- length(tags)
# makes function to create palette
getPalette <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
# manage use of diagonal cells in adj_mat
remove_diags <- function(mat, rm.lower = TRUE, ...) {
diag(mat) <- 0
if (isTRUE(rm.lower)) mat[lower.tri(mat)] <- 0
mat
}
# ## order plot layering by smallest to largest so larges are on top
ord <- order(rowSums(remove_diags(adjmat, FALSE)))
# with the diags means there's a return
chorddiag::chorddiag(adjmat[ord, ord], margin = 150, showTicks =FALSE
, groupnameFontsize = 8  # have to shrink font for web viewing
, groupnamePadding = 5
, groupThickness = .05
, chordedgeColor = "gray90"
, groupColors = getPalette(colorCount)
)
# without the diags means there's NOT return
chorddiag::chorddiag(remove_diags(adjmat[ord, ord], FALSE), margin = 150, showTicks =FALSE
, groupnameFontsize = 8
, groupnamePadding = 5
, groupThickness = .05
, chordedgeColor = "gray90"
, groupColors =getPalette(colorCount))
View(adjmat)
ord
colorCount
setwd("~/GitHub/r_scripts")
save.image(file = 'd3-R_interactive_chord_diagramImage.RData')
